function! s:setbuffer() abort
	%delete
	call append(0, [
		\ 'Foo Bar Baz',
		\ 'Foo Bar Baz',
		\ 'Foo Bar Baz',
		\ ])
	$delete
endfunction
function! TestIndent() abort
	return shiftwidth()
endfunction

Describe Masquerade
	Before
		set expandtab tabstop=4 shiftwidth=4 softtabstop=4
	End

	After all
		set textwidth&
		set indentexpr=
	End

	Context y
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			let @a= ''
			call cursor(1, 1)
			execute "normal \"a3\<Plug>(masquerade-y)iw"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), 'Foo Bar')
			Assert Equals(getregtype('a'), 'v')

			call s:setbuffer()
			let @a= ''
			call cursor(1, 1)
			execute "normal viw\"a\<Plug>(masquerade-y)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), 'Foo')
			Assert Equals(getregtype('a'), 'v')
		End

		It yanks texts characterwise
			call s:setbuffer()
			let @a= ''
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-y)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), "Foo\nBar\nBaz")
			Assert Equals(getregtype('a'), "\<C-v>3")
		End

		It deletes texts linewise
			call s:setbuffer()
			let @a= ''
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-y)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), "Foo Bar Baz\nFoo Bar Baz\n")
			Assert Equals(getregtype('a'), 'V')
		End

		It deletes texts blockwise
			call s:setbuffer()
			let @a= ''
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-y)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), "Bar\nBar\nBar")
			Assert Equals(getregtype('a'), "\<C-v>3")
		End
	End

	Context d
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			let @a= ''
			call cursor(1, 1)
			execute "normal \"a3\<Plug>(masquerade-d)iw"
			Assert Equals(getline(1), ' Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), 'Foo Bar')
			Assert Equals(getregtype('a'), 'v')

			call s:setbuffer()
			let @a= ''
			call cursor(1, 1)
			execute "normal viw\"a\<Plug>(masquerade-d)"
			Assert Equals(getline(1), ' Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), 'Foo')
			Assert Equals(getregtype('a'), 'v')
		End

		It deletes texts characterwise
			call s:setbuffer()
			let @a= ''
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-d)"
			Assert Equals(getline(1), ' Bar Baz')
			Assert Equals(getline(2), 'Foo  Baz')
			Assert Equals(getline(3), 'Foo Bar ')
			Assert Equals(getreg('a'), "Foo\nBar\nBaz")
			Assert Equals(getregtype('a'), "\<C-v>3")
		End

		It deletes texts linewise
			call s:setbuffer()
			let @a= ''
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-d)"
			Assert Equals(line('$'), 1)
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getreg('a'), "Foo Bar Baz\nFoo Bar Baz\n")
			Assert Equals(getregtype('a'), 'V')
		End

		It deletes texts blockwise
			call s:setbuffer()
			let @a= ''
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-d)"
			Assert Equals(getline(1), 'Foo  Baz')
			Assert Equals(getline(2), 'Foo  Baz')
			Assert Equals(getline(3), 'Foo  Baz')
			Assert Equals(getreg('a'), "Bar\nBar\nBar")
			Assert Equals(getregtype('a'), "\<C-v>3")
		End
	End

	Context g~
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 3\<Plug>(masquerade-g~)iw"
			Assert Equals(getline(1), 'fOO bAR Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw\<Plug>(masquerade-g~)"
			Assert Equals(getline(1), 'fOO Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It reverses upper/lower-cases of characterwise texts
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-g~)"
			Assert Equals(getline(1), 'fOO Bar Baz')
			Assert Equals(getline(2), 'Foo bAR Baz')
			Assert Equals(getline(3), 'Foo Bar bAZ')
		End

		It reverses upper/lower-cases of linewise texts
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-g~)"
			Assert Equals(getline(1), 'fOO bAR bAZ')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'fOO bAR bAZ')
		End

		It reverses upper/lower-cases of blockwise texts
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-g~)"
			Assert Equals(getline(1), 'Foo bAR Baz')
			Assert Equals(getline(2), 'Foo bAR Baz')
			Assert Equals(getline(3), 'Foo bAR Baz')
		End
	End

	Context gu
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 3\<Plug>(masquerade-gu)iw"
			Assert Equals(getline(1), 'foo bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw\<Plug>(masquerade-gu)"
			Assert Equals(getline(1), 'foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It converts characterwise texts to lower-case
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gu)"
			Assert Equals(getline(1), 'foo Bar Baz')
			Assert Equals(getline(2), 'Foo bar Baz')
			Assert Equals(getline(3), 'Foo Bar baz')
		End

		It converts linewise texts to lower-case
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gu)"
			Assert Equals(getline(1), 'foo bar baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'foo bar baz')
		End

		It converts blockwise texts to lower-case
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gu)"
			Assert Equals(getline(1), 'Foo bar Baz')
			Assert Equals(getline(2), 'Foo bar Baz')
			Assert Equals(getline(3), 'Foo bar Baz')
		End
	End

	Context gU
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 3\<Plug>(masquerade-gU)iw"
			Assert Equals(getline(1), 'FOO BAR Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw\<Plug>(masquerade-gU)"
			Assert Equals(getline(1), 'FOO Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It converts characterwise texts to upper-case
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gU)"
			Assert Equals(getline(1), 'FOO Bar Baz')
			Assert Equals(getline(2), 'Foo BAR Baz')
			Assert Equals(getline(3), 'Foo Bar BAZ')
		End

		It converts linewise texts to upper-case
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gU)"
			Assert Equals(getline(1), 'FOO BAR BAZ')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'FOO BAR BAZ')
		End

		It converts blockwise texts to upper-case
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gU)"
			Assert Equals(getline(1), 'Foo BAR Baz')
			Assert Equals(getline(2), 'Foo BAR Baz')
			Assert Equals(getline(3), 'Foo BAR Baz')
		End
	End

	Context g?
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 3\<Plug>(masquerade-g?)iw"
			Assert Equals(getline(1), 'Sbb One Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw\<Plug>(masquerade-g?)"
			Assert Equals(getline(1), 'Sbb Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It ROT13-encodes characterwise texts
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-g?)"
			Assert Equals(getline(1), 'Sbb Bar Baz')
			Assert Equals(getline(2), 'Foo One Baz')
			Assert Equals(getline(3), 'Foo Bar Onm')
		End

		It ROT13-encodes linewise texts
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-g?)"
			Assert Equals(getline(1), 'Sbb One Onm')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Sbb One Onm')
		End

		It ROT13-encodes blockwise texts
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-g?)"
			Assert Equals(getline(1), 'Foo One Baz')
			Assert Equals(getline(2), 'Foo One Baz')
			Assert Equals(getline(3), 'Foo One Baz')
		End
	End

	Context gq
		Before
			set textwidth=8
		End

		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 2\<Plug>(masquerade-gq)j"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz Foo')
			Assert Equals(getline(3), 'Bar Baz')
			Assert Equals(getline(4), 'Foo Bar')
			Assert Equals(getline(5), 'Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw\<Plug>(masquerade-gq)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getline(4), 'Foo Bar Baz')
		End

		It re-formats lines of texts for characterwise selection
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gq)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz')
			Assert Equals(getline(3), 'Foo Bar')
			Assert Equals(getline(4), 'Baz')
			Assert Equals(getline(5), 'Foo Bar')
			Assert Equals(getline(6), 'Baz')
		End

		It re-formats lines of texts for linewise selection
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gq)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getline(4), 'Foo Bar')
			Assert Equals(getline(5), 'Baz')
		End

		It re-formats lines of texts for blockwise selection
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gq)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz Foo')
			Assert Equals(getline(3), 'Bar Baz')
			Assert Equals(getline(4), 'Foo Bar')
			Assert Equals(getline(5), 'Baz')
		End

		After
			set textwidth&
		End
	End

	Context gw
		Before
			set textwidth=8
		End

		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 2\<Plug>(masquerade-gw)j"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz Foo')
			Assert Equals(getline(3), 'Bar Baz')
			Assert Equals(getline(4), 'Foo Bar')
			Assert Equals(getline(5), 'Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw\<Plug>(masquerade-gw)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getline(4), 'Foo Bar Baz')
		End

		It re-formats lines of texts for characterwise selection
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gw)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz')
			Assert Equals(getline(3), 'Foo Bar')
			Assert Equals(getline(4), 'Baz')
			Assert Equals(getline(5), 'Foo Bar')
			Assert Equals(getline(6), 'Baz')
		End

		It re-formats lines of texts for linewise selection
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gw)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getline(4), 'Foo Bar')
			Assert Equals(getline(5), 'Baz')
		End

		It re-formats lines of texts for blockwise selection
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-gw)"
			Assert Equals(getline(1), 'Foo Bar')
			Assert Equals(getline(2), 'Baz Foo')
			Assert Equals(getline(3), 'Bar Baz')
			Assert Equals(getline(4), 'Foo Bar')
			Assert Equals(getline(5), 'Baz')
		End

		After
			set textwidth&
		End
	End

	Context =
		Before
			set expandtab tabstop=4 shiftwidth=4 softtabstop=4
			set indentexpr=TestIndent()
		End

		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 2\<Plug>(masquerade-=)j"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw\<Plug>(masquerade-=)"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It re-indents lines of texts for characterwise selection
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-=)"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')
		End

		It re-indents lines of texts for linewise selection
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-=)"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')
		End

		It re-indents lines of texts for blockwise selection
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-=)"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')
		End

		After
			set expandtab& tabstop& shiftwidth& softtabstop&
			set indentexpr=
		End
	End

	Context <
		Before
			set expandtab tabstop=4 shiftwidth=4 softtabstop=4
			set indentexpr=TestIndent()
		End

		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			1,3>
			call cursor(1, 5)
			execute "normal 2\<Plug>(masquerade-<)j"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')

			call s:setbuffer()
			1,3>
			1,3>
			call cursor(1, 5)
			execute "normal viw2\<Plug>(masquerade-<)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), '        Foo Bar Baz')
			Assert Equals(getline(3), '        Foo Bar Baz')
		End

		It decrements indents of lines for characterwise selection
			call s:setbuffer()
			1,3>
			call cursor(1, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 13)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-<)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It decrements indents of lines for linewise selection
			call s:setbuffer()
			1,3>
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-<)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It decrements indents of lines for blockwise selection
			call s:setbuffer()
			1,3>
			call cursor(1, 1)
			execute "normal \<C-v>"
			normal! 2j6l
			execute "normal \<Plug>(multiselect-check)"

			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')
			execute "normal \<Plug>(masquerade-<)"
			Assert Equals(getline(1), 'Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		After
			set expandtab& tabstop& shiftwidth& softtabstop&
			set indentexpr=
		End
	End

	Context >
		Before
			set expandtab tabstop=4 shiftwidth=4 softtabstop=4
			set indentexpr=TestIndent()
		End

		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 2\<Plug>(masquerade->)j"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')

			call s:setbuffer()
			call cursor(1, 1)
			execute "normal viw2\<Plug>(masquerade->)"
			Assert Equals(getline(1), '        Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It increments indents of lines for characterwise selection
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade->)"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')
		End

		It increments indents of lines for linewise selection
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade->)"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')
		End

		It increments indents of lines for blockwise selection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade->)"
			Assert Equals(getline(1), '    Foo Bar Baz')
			Assert Equals(getline(2), '    Foo Bar Baz')
			Assert Equals(getline(3), '    Foo Bar Baz')
		End

		After
			set expandtab& tabstop& shiftwidth& softtabstop&
			set indentexpr=
		End
	End

	Context !
		It fallbacks to the original operator if no multiselection
			%delete
			call append(0, ['3', '1', '2'])
			$delete
			call cursor(1, 1)
			execute "normal 2\<Plug>(masquerade-!)jsort\<CR>"
			Assert Equals(getline(1), '1')
			Assert Equals(getline(2), '2')
			Assert Equals(getline(3), '3')

			%delete
			call append(0, ['3', '1', '2'])
			$delete
			call cursor(1, 1)
			execute "normal Vj\<Plug>(masquerade-!)sort\<CR>"
			Assert Equals(getline(1), '1')
			Assert Equals(getline(2), '3')
			Assert Equals(getline(3), '2')
		End

		It filters lines of characterwise selection
			%delete
			call append(0, ['3', '1', '2'])
			$delete
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-!)sort\<CR>"
			Assert Equals(getline(1), '3')
			Assert Equals(getline(2), '1')
			Assert Equals(getline(3), '2')



			%delete
			call append(0, ['3', '1', '2'])
			$delete
			call cursor(1, 1)
			normal! v
			call cursor(3, 1)
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-!)sort\<CR>"
			Assert Equals(getline(1), '1')
			Assert Equals(getline(2), '2')
			Assert Equals(getline(3), '3')
		End

		It filters lines of linewise selection
			%delete
			call append(0, ['3', '1', '2'])
			$delete
			call cursor(1, 1)
			normal! V
			call cursor(3, 1)
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-!)sort\<CR>"
			Assert Equals(getline(1), '1')
			Assert Equals(getline(2), '2')
			Assert Equals(getline(3), '3')



			%delete
			call append(0, ['3', '1', '2'])
			$delete
			call cursor(1, 1)
			normal! V
			call cursor(2, 1)
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 1)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-!)sort\<CR>"
			Assert Equals(getline(1), '1')
			Assert Equals(getline(2), '3')
			Assert Equals(getline(3), '2')
		End

		It filters lines of blockwise selection
			%delete
			call append(0, ['3', '1', '2'])
			$delete
			call cursor(1, 1)
			execute "normal \<C-v>"
			normal! 2j
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-!)sort\<CR>"
			Assert Equals(getline(1), '1')
			Assert Equals(getline(2), '2')
			Assert Equals(getline(3), '3')
			set indentexpr=
		End
	End

	Context p
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call setreg('a', 'masquerade', 'v')
			call cursor(1, 1)
			execute "normal \"a2\<Plug>(masquerade-p)"
			Assert Equals(getline(1), 'Fmasquerademasqueradeoo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')

			call s:setbuffer()
			call setreg('a', 'masquerade', 'v')
			call cursor(1, 1)
			execute "normal viw\"a\<Plug>(masquerade-p)"
			Assert Equals(getline(1), 'masquerade Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It pastes on characterwise texts
			call s:setbuffer()
			call setreg('a', 'masquerade', 'v')
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-p)"
			Assert Equals(getline(1), 'masquerade Bar Baz')
			Assert Equals(getline(2), 'Foo masquerade Baz')
			Assert Equals(getline(3), 'Foo Bar masquerade')
			Assert Equals(@a, 'masquerade')
		End

		It pastes on linewise texts
			call s:setbuffer()
			call setreg('a', 'masquerade', 'v')
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-p)"
			Assert Equals(getline(1), 'masquerade')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'masquerade')
			Assert Equals(@a, 'masquerade')
		End

		It pastes on blockwise texts
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-p)"
			Assert Equals(getline(1), 'Foo masquerade Baz')
			Assert Equals(getline(2), 'Foo masquerade Baz')
			Assert Equals(getline(3), 'Foo masquerade Baz')
			Assert Equals(@a, 'masquerade')
		End
	End

	Context i
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 2\<Plug>(masquerade-i)masquerade\<Esc>"
			Assert Equals(getline(1), 'masquerademasqueradeFoo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It inserts texts to the heads of characterwise selections
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-i)masquerade\<Esc>"
			Assert Equals(getline(1), 'masqueradeFoo Bar Baz')
			Assert Equals(getline(2), 'Foo masqueradeBar Baz')
			Assert Equals(getline(3), 'Foo Bar masqueradeBaz')
		End

		It inserts texts to the heads of linewise selections
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-i)masquerade\<Esc>"
			Assert Equals(getline(1), 'masqueradeFoo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'masqueradeFoo Bar Baz')
		End

		It inserts texts to the heads of blockwise selections
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-i)masquerade\<Esc>"
			Assert Equals(getline(1), 'Foo masqueradeBar Baz')
			Assert Equals(getline(2), 'Foo masqueradeBar Baz')
			Assert Equals(getline(3), 'Foo masqueradeBar Baz')
		End
	End

	Context a
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			execute "normal 2\<Plug>(masquerade-a)masquerade\<Esc>"
			Assert Equals(getline(1), 'Fmasquerademasqueradeoo Bar Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
		End

		It inserts texts to the tail of characterwise selections
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-a)masquerade\<Esc>"
			Assert Equals(getline(1), 'Foomasquerade Bar Baz')
			Assert Equals(getline(2), 'Foo Barmasquerade Baz')
			Assert Equals(getline(3), 'Foo Bar Bazmasquerade')
		End

		It inserts texts to the tail of linewise selections
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-a)masquerade\<Esc>"
			Assert Equals(getline(1), 'Foo Bar Bazmasquerade')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Bazmasquerade')
		End

		It inserts texts to the heads of blockwise selections
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \<Plug>(masquerade-a)masquerade\<Esc>"
			Assert Equals(getline(1), 'Foo Barmasquerade Baz')
			Assert Equals(getline(2), 'Foo Barmasquerade Baz')
			Assert Equals(getline(3), 'Foo Barmasquerade Baz')
		End
	End

	Context c
		It fallbacks to the original operator if no multiselection
			call s:setbuffer()
			call cursor(1, 1)
			let @a = ''
			execute "normal \"a3\<Plug>(masquerade-c)iwmasquerade\<Esc>"
			Assert Equals(getline(1), 'masquerade Baz')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'Foo Bar Baz')
			Assert Equals(getreg('a'), 'Foo Bar')
			Assert Equals(getregtype(), 'v')
		End

		It inserts texts of characterwise selections
			call s:setbuffer()
			call cursor(1, 1)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(2, 5)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 9)
			normal! viw
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-c)masquerade\<Esc>"
			Assert Equals(getline(1), 'masquerade Bar Baz')
			Assert Equals(getline(2), 'Foo masquerade Baz')
			Assert Equals(getline(3), 'Foo Bar masquerade')
			Assert Equals(getreg('a'), "Foo\nBar\nBaz")
			Assert Equals(getregtype('a'), "\<C-v>3")
		End

		It inserts texts of linewise selections
			call s:setbuffer()
			call cursor(1, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			call cursor(3, 5)
			normal! V
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-c)masquerade\<Esc>"
			Assert Equals(getline(1), 'masquerade')
			Assert Equals(getline(2), 'Foo Bar Baz')
			Assert Equals(getline(3), 'masquerade')
			Assert Equals(getreg('a'), "Foo Bar Baz\nFoo Bar Baz\n")
			Assert Equals(getregtype('a'), 'V')
		End

		It change texts of blockwise selections
			call s:setbuffer()
			call cursor(1, 5)
			execute "normal \<C-v>"
			normal! 2j2l
			execute "normal \<Plug>(multiselect-check)"

			execute "normal \"a\<Plug>(masquerade-c)masquerade\<Esc>"
			Assert Equals(getline(1), 'Foo masquerade Baz')
			Assert Equals(getline(2), 'Foo masquerade Baz')
			Assert Equals(getline(3), 'Foo masquerade Baz')
			Assert Equals(getreg('a'), "Bar\nBar\nBar")
			Assert Equals(getregtype('a'), "\<C-v>3")
		End
	End
End
" vim:set noet ts=4 sw=4 sts=-1:
